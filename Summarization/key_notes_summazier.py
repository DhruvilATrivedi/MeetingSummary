# -*- coding: utf-8 -*-
"""Key_Notes_Summazier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-4lQFKuHUc9_MXHsT0Nyc9l4LzzxQL8r
"""

pip install summa

#Importing libraries
from summa import summarizer
from summa import keywords
import pandas as pd

from google.colab import drive
drive.mount("/content/drive")

#Reading csv file
df = pd.read_csv("/content/drive/My Drive/MeetingSummary/simpsons_dataset.csv")
print(df)

type(df.spoken_words[0])

len(df)

#Checking for null rows
df.isnull().sum()

#Dropping null rows
df.dropna(inplace=True)

len(df)

df.reset_index(inplace=True)
df.drop(['index'], axis=1)

df.isnull().sum()

#Considering first 3600 values only
#This is not needed in the actual system
test_df = df.iloc[:3600]
test_df

#Merging all statements and dialogues
text = ' '.join(test_df["spoken_words"])
text

#Creating an abbreviation dictionary
abbreviation_mapping = {"ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not",
                         
                           "didn't": "did not", "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not",

                           "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is",

                           "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would",

                           "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would",

                           "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam",

                           "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have",

                           "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock",

                           "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have",

                           "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is",

                           "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as",

                           "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would",

                           "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have",

                           "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have",

                           "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are",

                           "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are",

                           "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is",

                           "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have",

                           "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have",

                           "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all",

                           "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have",

                           "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have",

                           "you're": "you are", "you've": "you have"}

#Cleaning text by updating the abbreviations
cleaned_text = text
cleaned_text = ' '.join([abbreviation_mapping[t] if t in abbreviation_mapping else t for t in cleaned_text.split(" ")]) 
cleaned_text

#Sumarizing and generating keywords for the summary
summary = summarizer.summarize(cleaned_text, ratio=0.01)
key_words = keywords.keywords(cleaned_text, ratio=0.01)

print("SUMMARY\n",summary)

t = cleaned_text.split(". ")
s = summary.split("\n")
print(len(t))
print(len(s))

print("KEYWORDS\n",key_words)

keyword_list = key_words.split("\n")
keyword_list

len(text)

len(summary)

len(key_words)

len(keyword_list)

"""I have taken the loop of 3600 to consider the time period of 1 hour assuming that each row's dialogue in the data frame was spoken in 1 second (highly unlikely or nearly impossible).

The processing of keywords and summary took almost something near about 1:30 minutes.

However, for all the 1.5 lakh rows, the processing kept running for 0 mins and still wasn't complete.

Also the content length was about 15% of actual content instead of 5%. But maybe that is due to the difference of characters in each row.



Time was similar for both 0.01 and 0.05 ratio. (Conclusion, time depends on size of totl text and not the parameters).

Summary length was 1.69% and 5.6% respectively by character count.

Summary length of number of rows is nearly 1.44% and 7.58% respectively.

Keywords length was 0.15% and 0.8% of total text and 8.95% and 15.3% of the summary.
"""

summary_list = summary.split(sep="[{(split)}]")
summary_list

len(summary_list)

df["spoken_words"][]

index_list = []
for j in range(len(summary_list)):
  for i in range(3600):
    if (summary_list[j] == df["spoken_words"][i]):
      index_list.append(i)
      break
index_list

len(index_list)

exp = summary.split("[[(split)}]")

print("NOTES")
for i in range(3600):
  if (i in index_list):
    print(df["raw_character_text"][i], " : ", df["spoken_words"][i], end="\n")

text = ' '.join(df["spoken_words"])
text

q = ""
for i in range(3600):
  q += df["raw_character_text"][i] + " : " + df["spoken_words"][i] + "\n"
q

summary1 = summarizer.summarize(q, ratio=0.05)
key_words1 = keywords.keywords(q, ratio=0.05)

print(summary1)

print(key_words1)